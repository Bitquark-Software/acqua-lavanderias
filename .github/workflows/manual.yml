# Workflow que valida la versión más reciente del frontend, compila los assets y genera un build versionado como release
# Si no hubieran cambios del frontend el job debe ignorar los cambios de versión

name: Build and Publish

on:
  pull_request:
    branches:
      - develop
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Verify package.json version
        id: version_check
        run: |
          changed_files=$(git diff --name-only HEAD~1 HEAD -- acqua-frontend/)
          if echo "$changed_files" | grep -q '^acqua-frontend/'; then
            current_version=$(git show HEAD~1:acqua-frontend/package.json | grep '"version":' | awk -F '"' '{print $4}')
            new_version=$(git diff HEAD~1 HEAD -- acqua-frontend/package.json | grep '^+.*"version":' | awk -F '"' '{print $4}')

            if [ "$new_version" == "" ]; then
              echo "##[error] No version change detected in package.json"
              exit 1
            elif [ "$new_version" == "$current_version" ]; then
              echo "##[error] New version is the same as the current version"
            exit 1
            elif ! [[ "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "##[error] Invalid version format"
              exit 1
            fi

            echo "::set-output name=new_version::$new_version"
          else
            echo "No changes in acqua-frontend directory. Skipping version check."
            echo "::set-output name=new_version::"
            exit
          fi

      - name: Setup Node.js
        if: steps.version_check.outputs.new_version != ''
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Change to app directory
        if: steps.version_check.outputs.new_version != ''
        run: cd acqua-frontend

      - name: Install dependencies
        if: steps.version_check.outputs.new_version != ''
        working-directory: acqua-frontend
        run: npm install

      - name: Install Angular CLI
        if: steps.version_check.outputs.new_version != ''
        working-directory: acqua-frontend
        run: npm install -g @angular/cli

      - name: Build application
        if: steps.version_check.outputs.new_version != ''
        working-directory: acqua-frontend
        run: ng build

      - name: Zip application
        if: steps.version_check.outputs.new_version != ''
        run: |
          new_version=${{ steps.version_check.outputs.new_version }}
          zip -r "${new_version}.zip" acqua-frontend/dist/

      - name: Create release
        if: steps.version_check.outputs.new_version != ''
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_check.outputs.new_version }}
          release_name: Release ${{ steps.version_check.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Upload artifact
        if: steps.version_check.outputs.new_version != ''
        uses: actions/upload-artifact@v2
        with:
          name: release_artifact
          path: ${{ steps.version_check.outputs.new_version }}.zip
      
      - name: Create backup branch
        if: steps.version_check.outputs.new_version != ''
        run: |
          new_version=${{ steps.version_check.outputs.new_version }}
          git checkout -b "releases/$new_version" $(git rev-parse develop)
          git push origin "releases/$new_version"
